@page "/OrderConfirmation"
@using Blazored.LocalStorage
@inject IOrderService _orderService
@inject ILocalStorageService _localStorage



<div clas="container">
   @if (IsProcessing)
  {
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
        <img src="images/ajax-loader.gif" />
    </div>
  }
  else
  {
    @if(Order.OrderHeader.Status == StaticDetails.StatusConfirmed)
    {
      <div class="row mt-4 pt-4">
        <div class="col-10 offset-1 text-center">
          <h2 class="text-warning">Order Confirmed</h2>
            <p>Your order has been placed successfully with the order id: @Order.OrderHeader.Id</p>
        </div>
        <div class="col-8 offset-2">
          <img src="/images/confirmation.jpg" width="100%" style="border-radius:30px;" />
        </div>
      </div>
    }
    else
    {
      <div class="row mt-4 pt-4">
        <div class="col-10 offset-1 text-center">
          <h2 class="text-warning">Order Issue!</h2>
            <p>Your order had a payment issue with order id: @Order.OrderHeader.Id</p>
        </div>
        <div class="col-8 offset-2">
          <img src="/images/confirmation.jpg" width="100%" style="border-radius:30px;" />
        </div>
      </div>
    }
  }
</div>
@code {
  private bool IsProcessing { get; set; } = false;
  private OrderDTO Order { get; set; }

  protected override async Task OnInitializedAsync()
  {
    IsProcessing = true;
    Order = await _localStorage.GetItemAsync<OrderDTO>(StaticDetails.Local_OrderDetails);
    // add logic to check payment and update status

    var updatedOrder = await _orderService.MarkPaymentSuccessful(Order.OrderHeader);
    if(updatedOrder.Status== StaticDetails.StatusConfirmed)
    {
      Order.OrderHeader.Status = updatedOrder.Status;
      await _localStorage.RemoveItemAsync(StaticDetails.Local_OrderDetails);
      await _localStorage.RemoveItemAsync(StaticDetails.ShoppingCart);
    }

    IsProcessing = false;
  }
}
